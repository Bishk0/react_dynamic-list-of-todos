{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","searchLine","filterBy","handleChange","key","value","setState","this","props","todos","selectUser","filteredTodos","filter","todo","title","toLowerCase","includes","completed","className","type","placeholder","onChange","event","target","name","e","map","id","checked","readOnly","userId","onClick","Component","URL","getTodos","a","fetch","response","json","data","getUsers","CurrentUser","selectedUser","componentDidMount","getUser","componentDidUpdate","prevProps","email","phone","clearUser","React","App","selectedUserId","then","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.768103b5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends Component {\n  state = {\n    searchLine: '',\n    filterBy: 'all',\n  }\n\n  handleChange = (key, value) => this.setState({ [key]: value });\n\n  render() {\n    const { todos, selectUser } = this.props;\n    const { searchLine, filterBy } = this.state;\n    let filteredTodos = todos.filter((todo) => {\n      if (todo.title === null) {\n        return false;\n      }\n\n      return todo.title.toLowerCase().includes(searchLine.toLowerCase());\n    });\n\n    if (filterBy !== 'all') {\n      filteredTodos = filteredTodos.filter(todo => (filterBy === 'active'\n        ? !todo.completed\n        : todo.completed));\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title\"\n            value={this.state.searchLine}\n            onChange={(event) => {\n              this.setState({ searchLine: event.target.value });\n            }}\n          />\n          <select\n            name=\"filterBy\"\n            value={filterBy}\n            onChange={e => this.handleChange(e.target.name, e.target.value)}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                className={`\n                  TodoList__item\n                  TodoList__item${todo.completed\n                  ? '--checked'\n                  : '--unchecked'}`\n                  }\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\"\n                  type=\"button\"\n                  value={todo.userId}\n                  onClick={e => selectUser(+(e.target.value))}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  })).isRequired,\n  selectUser: PropTypes.func.isRequired,\n};\n","const URL = 'https://mate-api.herokuapp.com';\n\nexport const getTodos = async() => {\n  const response = await fetch(`${URL}/todos`);\n  const data = await response.json();\n\n  return data.data;\n};\n\nexport const getUsers = async(userId) => {\n  const response = await fetch(`${URL}/users/${userId}`);\n  const data = await response.json();\n\n  return data.data;\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    selectedUser: {},\n  }\n\n  async getUser() {\n    const selectedUser = await getUsers(this.props.userId);\n\n    this.setState({ selectedUser });\n  }\n\n  componentDidMount = () => {\n    this.getUser();\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUser();\n    }\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n\n    return (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {'Selected user: '}\n              {selectedUser.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n          <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n          <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n        </div>\n        <button type=\"button\" onClick={this.props.clearUser}>Clear</button>\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos().then(todos => this.setState({ todos }));\n  }\n\n  selectUser = selectedUserId => this.setState({ selectedUserId });\n\n  clearUser = () => this.setState({ selectedUserId: 0 });\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList todos={todos} selectUser={this.selectUser} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clearUser={this.clearUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}